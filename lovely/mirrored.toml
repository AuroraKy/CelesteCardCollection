[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# injecting mirrored edition into badge colour area
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "pinned_left = G.C.ORANGE,"
position = "after"
payload = "mirrored = G.C.DARK_EDITION,"
match_indent = true

# injecting mirrored desc into info_queue
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if v == 'foil' then info_queue[#info_queue+1] = G.P_CENTERS['e_foil'] end"
position = "after"
payload = "if v == 'mirrored' then info_queue[#info_queue+1] = {key = 'e_mirrored', set = 'Other'} end"
match_indent = true

# Do not draw front of card if mirrored
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "elseif not self.greyed then"
position = "at"
payload = "elseif not self.greyed and (not self.edition or not self.edition.mirrored) then"
match_indent = true

# overwrite if statement to prevent the edition eval block from triggering if no value modifier is defined (tl;dr, no ugly blank trigger on mirrored cards)
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if effects[ii].edition then"
position = "at"
payload = "if effects[ii].edition and not (effects[ii].edition.chip_mod == nil and effects[ii].edition.mult_mod == nil and effects[ii].edition.x_mult_mod == nil) then"
match_indent = true

# mirrored effect on cards in deck and discard pile
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "G.FUNCS.draw_from_hand_to_discard()"
position = "before"
payload = '''
for i = 1, #G.discard.cards do
	if G.discard.cards[i].edition ~= nil then
		if G.discard.cards[i].edition.mirrored == true then
			if not next(find_joker('Ominous Mirror')) then
				G.discard.cards[i]:start_dissolve()
			end
		end
	end
end
for i = 1, #G.deck.cards do
	if G.deck.cards[i].edition ~= nil then
		if G.deck.cards[i].edition.mirrored == true then
			if not next(find_joker('Ominous Mirror')) then
				G.deck.cards[i]:start_dissolve()
			end
		end
	end
end
'''
match_indent = true

# mirrored effect on cards in hand
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "local effects = {G.hand.cards[i]:get_end_of_round_effect()}"
position = "after"
payload = '''
	if G.hand.cards[i].edition ~= nil then
		if G.hand.cards[i].edition.mirrored == true then
			if not next(find_joker('Ominous Mirror')) then
				if G.hand.cards[i].ability.name == 'Glass Card' then 
                    			G.hand.cards[i]:shatter()
				else
                    			G.hand.cards[i]:start_dissolve()
                		end
			end
		end
	end
'''
match_indent = true


# Add mirrored to the collection
[[patches]]
[patches.regex]
target = "functions/UI_definitions.lua"
pattern = '''for i = 1, 5 do\n\s+local card'''
position = "at"
payload = '''
	editions = {}
	for k, v in ipairs(G.P_CENTER_POOLS['Edition']) do
		table.insert(editions, string.sub(v.key, 3, -1))	
	end
	for i = 1, #editions do
      local card
'''
match_indent = true